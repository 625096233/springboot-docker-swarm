
user  nginx;
worker_processes  auto; #定义了nginx对外提供web服务时的worder进程数，CPU核的数量、存储数据的硬盘数量及负载模式
#worker_rlimit_nofile 100000 #更改worker进程的最大打开文件数限制,比'ulimit -a'多。解决"too many open files"

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  2048; #worker进程同时打开的最大连接数
    multi_accept on; #当收到一个新连接通知后接受尽可能多的连接
}


http {
    include       /etc/nginx/mime.types; #只是一个在当前文件中包含另一个文件内容的指令。
    default_type  application/octet-stream; #设置文件默认MIME-type=application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    server_tokens off; #关闭nginx版本号
    sendfile        on; #sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。sendfile()是立即将数据从磁盘读到OS缓存。因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效(更多有关于sendfile)
    #tcp_nopush     on;

    keepalive_timeout  65;  #给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接
    reset_timedout_connection on; #关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间

    client_max_body_size 100M; #客户端上传文件大小
    gzip on; #开启gzip压缩
    gzip_disable "msie6"; #低版本兼容
    gzip_proxied any; #允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求
    gzip_static on; #告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源
    gzip_min_length 1000; #设置对数据启用压缩的最少字节数
    gzip_comp_level 6; #压缩级别,1-10越高越消耗CPU，但是压缩越好
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; #设置需要压缩的数据格式

    include /etc/nginx/conf.d/*.conf;
}
